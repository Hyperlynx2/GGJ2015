
1 AI Type
  - Guard

2 Player Types
  - Agent
  - Handler


Level gameplay overview (from Agent POV) :

  - Level starts
    ~ Given objective (atm, always "Obtain Cutlery and Return to your food")
  - Navigate level
    ~ Explore to find Cutlery objects
      - 2 cutlery objective objects (knife and fork)
      - Cutlery placed randomly among a series of potential locations as defined in level data
    ~ No mini map
    ~ Avoid being seen by guards
  - Collect cutlery
  - Return to level Start
    ~ Level start marker (ie, meal) is randomly different each level load
  - Transition to next level


Guard :
  - Follows a closed loop path defined by waypoints in level data
  - Moves at a fixed rate (to be set by a property of the first path node)
  - May pause at each path node and look around (see level data for path node settings)
  - Never deviates from fixed path
  - Has a sight cone (wedge really)
    ~ Sight cones have no visible representation

  Guard encounteres a locked door
    - Stop
    - "Unlock" door (just stand there for a while plaing an anim or whatever)
    - Go through door
    - Lock door behind after going through
      ~ This is basically just a big slow down for any guard who encounters a locked door
      ~ Provides notable benefit to hacking shut a door in front of a guard

  Guard Encounters Player
    - Play some "Guard Alerted" sound
    - a couple of 100 ms later, round ends with;
      ~ Game over screen (Image of player being escorted away by guard)
      ~ Some stats
        - Round duration
        - Doors hacked
        - Cameras hacked
        - Items collected
        - Alarms tripped
      ~ Level Restarts

Agent :
  Controls and POV
    - FPS point of view
    - WASD + Mouse (standard FPS controls)
    - No Jump
    - Will walk up ramps (ramps are 45 degree)
  
  Actions
    - Press button
      ~ Buttons are world space UI objects generated from a node in level data
      ~ Each button has an assosiated door(/other operable object)

    - Pick up item
      ~ Items can include
        - Utensil (quest goal) - (multiple required to complete level?)
        - Lanyard/security pass (essentiall god mode, guards won't bother you if you have it)

  Movement
    - Smooth movement, not locked to grid in either position or orientation
    - Collides with walls
    - Walks up ramps (45 degree) ~ (multiple height levels are a stretch goal)
      
      Issues to resolve when working with multiple heights
        ~ What happens if a player walks off a ledge?
          (probably best to set up levels with railings everywhere so that it's not possible)

  Interaction with AI
    - If player falls inside Guard sight cone, player is discovered and level restarts
      ~ This would have some sort of text pop up explaining what has happened (found without pass)

  Interation with other players
    - Communication with players is 1 way only
      ~ VO is fed into headphones from other player's microphones
      ~ VO from ony 1 player can be heard at a time



Handler :
  Controls and POV
    - Third person point of view of the level
      ~ POV is representative of video cameras in pre determined locations throughout the level
        - Fixed location
        - Wide FOV
        - Can only pan horizontally
        - Camera pan is very slow compared to standard FPS camera
        - Horizontal pan of camera is restricted to a set arc (say 120 degrees or whatever)
        - Pan is not actually player controlled, and just ping pongs between min and max extents
    - Has a mouse cursor to click on things
      (This is the only way Handlers can interact with the world)

  Camera Inhabiting

    There are 2 main options here
      A - More than one Handler may inhabit any given camera 
      B - Each camera only allows a single Handler, and Handlers may only move to an empty camera
          (B would probably be my preference)

      In either case A or B, there islo the initial stat to take into account
        (There are also 2 (2.5) options here;)
          I. - All Handlers start in the same camera
          II. - All players start in different, uniquely assigned cameras
            (in this case, the 2 sub options are;)
              a. - Cameras are randomly assigned to Handlers
              b. - all cameras in a level are numbered sequentially, and players are just assigned in order

  Interaction with other players
    - Can only interact directly with the Agent
    - Agent interaction is spoken only
      ~ VO via microphone -> fed into agent's headphones
      ~ Only one handler can give VO commands at a time
      ~ Have to hold down space to talk
      ~ if there is already a handler in "talk mode" then;
        - You are unable to communicate with VO, even when holding down space
        - Your VO will kick in when talking Handler lets go of space
        - When multiple handlers are involved, their VO is handled as a queue
          ~ EG
            - "A" holds down space - "A" can talk
            - "B" holds down space - "A" still talking
            - "A" lets go of space - "B" can talk
            - "C" holds down space - "B" still talking
            - "D" holds down space - "B" still talking (2 players now holding down space but not heard)
            - "B" lets go of space - "C" can talk
            - "C" lets go of space - "D" can talk

  Interaction with Environment (Actions)
    - Click on door to "hack" it open or closed (see hacking doors)
    - Click on a camera to inhabit it
    - Other
      ~ There is so much potential for extending this game play into all sorts of interesting directions
      ~ For GGJ MVP, we should probably stick to just those 2 things
      ~ If we nail those to, and make them fun with time to spare, we can assess other features

  Hacking Doors
    - Click on a door to lock or unlock it (lock/unlock = open/closed)
    - Hacking a door has a mini game associated with it (Minigame details TBA)
    - Successfully hacking a door simply toggles it from locked to unlocked and vice versa
    - Doors may be toggled via hacking any number of times
    - A successful (or unsuccessful) hack on a door is followed by a cooldown timer
    - A door is unsuccessfully hacked if the minigame is failed
      (for now, the mini game should just be 2 tick boxes labelled "successful" and "unsuccessful")
    - Cooldown times should probably be different for successful and unsuccessful hacks
    - A door may not be hacked by another player while it is in the process of being hacked
      (Or still in cool down from the last hack)

    - Door hack failure results in
      ~ An alarm sound plays
      ~ All Guard node wait times are ignored (for a set period of time)
      ~ All Guard movement speeds increase (for a set period of time)

  Hacking Cameras
    - For now, lets just say it's identical to hacking doors, with the only difference being the result of fail/success
      ~ Success - you now inhabit that camera
      ~ Failure - don't switch camera
                - current camera stops moving for a period of time
                - current camera is disrupted with static and poor quality for a period of time

    - Also discussed was the posibility of camera swapping having a "universal cooldown", where no player could hack any camera for a period of time after any player made a successful hack (not just themselves)



Level Data (and other settings) :

Still kind of in flux